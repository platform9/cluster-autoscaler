# Copyright 2016 The Kubernetes Authors. All rights reserved#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License..

# Usage:
# Build docker image for all the architecture - make all
# Build and push images for all the architecture - make all-push
# Build for specific architecture(ppc64le) - make container ARCH=ppc64le

ALL_ARCH = amd64 arm arm64 ppc64le s390x
ARCH ?= amd64
export DOCKER_CLI_EXPERIMENTAL=enabled

BUILDDIR=$(CURDIR)
registry_url = docker.io
image_name = ${registry_url}/platform9/cluster-autoscaler/addon-resizer
DOCKERFILE?=$(CURDIR)/Dockerfile
UPSTREAM_VERSION?=$(shell git describe --tags HEAD | sed 's/-.*//' )
image_tag = $(UPSTREAM_VERSION)-pmk-$(TEAMCITY_BUILD_ID)
PF9_TAG=$(image_name):${image_tag}
DOCKERARGS=
ifdef HTTP_PROXY
	DOCKERARGS += --build-arg http_proxy=$(HTTP_PROXY)
endif
ifdef HTTPS_PROXY
	DOCKERARGS += --build-arg https_proxy=$(HTTPS_PROXY)
endif

GOARM=7
GOLANG_VERSION = 1.19
REGISTRY = gcr.io/k8s-staging-autoscaling
IMGNAME = addon-resizer
IMAGE = $(REGISTRY)/$(IMGNAME)
MULTI_ARCH_IMG = $(IMAGE)-$(ARCH)
TAG = 1.8.16
# The output type could either be docker (local), or registry.
OUTPUT_TYPE ?= docker

BASEIMAGE?=gcr.io/distroless/static:latest

TEMP_DIR := $(shell mktemp -d)

all: all-container

sub-container-%:
	$(MAKE) ARCH=$* container

sub-push-%:
	$(MAKE) ARCH=$* push

all-container: test $(addprefix sub-container-,$(ALL_ARCH))

all-push: $(addprefix sub-push-,$(ALL_ARCH)) push-multi-arch

buildx-setup:
	docker buildx inspect img-builder > /dev/null || docker buildx create --name img-builder --use

container: .container-$(ARCH)
.container-$(ARCH): buildx-setup
	cp -r * $(TEMP_DIR)
	cd $(TEMP_DIR) && sed -i- 's|BASEIMAGE|$(BASEIMAGE)|g' Dockerfile

	docker run --rm -it -v $(TEMP_DIR):$(TEMP_DIR):Z -v `pwd`:/go/src/k8s.io/autoscaler/addon-resizer/:Z \
        golang:${GOLANG_VERSION} \
        /bin/bash -c "\
            cd /go/src/k8s.io/autoscaler/addon-resizer/ && \
            CGO_ENABLED=0 GOARM=$(GOARM) GOARCH=$(ARCH) go build -a -installsuffix cgo --ldflags '-w -X k8s.io/autoscaler/addon-resizer/nanny.AddonResizerVersion=$(TAG)' -o $(TEMP_DIR)/pod_nanny nanny/main/pod_nanny.go"

	docker buildx build \
		--pull \
		--platform linux/$(ARCH) \
		--output=type=$(OUTPUT_TYPE) \
		-t $(MULTI_ARCH_IMG):$(TAG) $(TEMP_DIR)

test:
	docker run --rm -it -v `pwd`:/go/src/k8s.io/autoscaler/addon-resizer/:Z \
	golang:${GOLANG_VERSION} \
        /bin/bash -c "\
            cd /go/src/k8s.io/autoscaler/addon-resizer/ && \
            go test ./nanny -v"

push: .push-$(ARCH)
.push-$(ARCH): .container-$(ARCH)
	gcloud docker -- push $(MULTI_ARCH_IMG):$(TAG)

push-multi-arch:
	docker manifest create --amend $(IMAGE):$(TAG) $(shell echo $(ALL_ARCH) | sed -e "s~[^ ]*~$(IMAGE)\-&:$(TAG)~g")
	@for arch in $(ALL_ARCH); do docker manifest annotate --arch $${arch} $(IMAGE):$(TAG) $(IMAGE)-$${arch}:$(TAG); done
	gcloud docker -- manifest push --purge $(IMAGE):$(TAG)

clean: $(addprefix sub-clean-,$(ALL_ARCH))
sub-clean-%:
	docker rmi -f $(IMAGE)-$*:$(TAG) || true

pf9-image: | $(BUILDDIR) ; $(info Building Docker image for pf9 Repo...) @ ## Build SR-IOV Network device plugin docker image
	@docker build -t $(PF9_TAG) -f $(DOCKERFILE)  $(CURDIR) $(DOCKERARGS)
	echo ${PF9_TAG} > $(BUILDDIR)/container-tag

pf9-push: 
	docker login
	docker push $(PF9_TAG)\
	&& docker rmi $(PF9_TAG)